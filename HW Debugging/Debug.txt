The test emptySet_testIsEmpty fails. I placed a breakpoint at line 111 in SetTester.java.
When I began debugging, I stepped in until I got to the isEmpty method in the ArraySet file. reading the javadoc in the SimpleSet let me know that this method should return true if rear is 0, and false if it is greater than 0. The original code was return (rear > 0);, which does the exact opposite of what it should, returning false when rear is 0, and true if it is larger. I fixed this by changing rear > 0 to rear < 1.

The test emptySet_addA_A_testIsEmpty fails. I placed a breakpoint at line 147 in SetTester.java
Because the testIsEmpty method relies on rear, I suspected that rear was the problem. While debugging, I continued using step in until I got to the ArraySet.add method. Because it had so many calls to the variable rear, I decided to double check the documentation on the variable itself, which said that rear is supposed to be the index of the next open slot in the set. But, in the add method, rear is never changed, meaning even though index 0 is now filled, rear says that index 0 is still open. Incrementing rear every time an element is added to the set fixed this problem.

In the A_addB_AB section of the Settester, the testRemove thrown an ArrayIndexOutOfBounds exception on the tests removing A and B. C passes as intended. I placed a breakpoint at line 265 of SetTester to begin debugging.
On my first debugging attempt, I though I had found the problem to be that the elements of the array were being pushed the wrong way, such as they would make a bigger gap in the set rather than closing it. When I tried this, my progress went backward, I failed more tests than when I found this bug, so I removed my changes and started again.
Because I could not get Eclipse to work on my personal machine, I am using Visual Studio Code. VSC's debugger has options in the debugger to make caught and uncaught exceptions breakpoints. I toggled both of these on and used the resume button to continue until I got the error I had in the initial test. Using that information I found that the while loop on line 74 of ArraySet was iterating one index too far, so I reduced the while loop from i < rear to i < (rear - 1), which fixed the problem.